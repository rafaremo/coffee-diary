datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name String?
  surname String?
  avatarUrl String?
  favoriteCoffeePreparation String?
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  passwordReset PasswordReset?
  emailConfirmation EmailConfirmation?
  notes    Note[]
  coffees  Coffee[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordReset {
  token     String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model EmailConfirmation {
  token     String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Coffee {
  id             String  @id @default(cuid())
  name           String
  brand          String
  preparation    String
  shots          Int
  flavor         String
  rating         Int
  description    String
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
}
